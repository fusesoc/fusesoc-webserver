# Generated by Django 5.2.1 on 2025-09-10 14:44

import django.db.models.deletion
import utils.spdx
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CorePackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sanitized_name', models.CharField(max_length=255, unique=True)),
                ('vlnv_name', models.CharField(help_text='The name of the core with version as specified in the .core file.', max_length=255)),
                ('version', models.CharField(help_text="Full version string, e.g. '1.2.3-abc'.", max_length=50)),
                ('version_major', models.IntegerField(help_text="Major version number (e.g. 1 for version '1.2.3-abc').")),
                ('version_minor', models.IntegerField(help_text="Minor version number (e.g. 2 for version '1.2.3-abc').")),
                ('version_patch', models.IntegerField(help_text="Patch version number (e.g. 3 for version '1.2.3-abc').")),
                ('version_prerelease', models.CharField(blank=True, help_text="Pre-release label (e.g. 'abc' for version '1.2.3-abc').", max_length=20, null=True)),
                ('core_url', models.URLField(help_text='URL to download the .core file from GitHub or another source.')),
                ('sig_url', models.URLField(blank=True, help_text='Optional URL to download the .sig file for signature verification.', null=True)),
                ('description', models.CharField(help_text='A short description of the core package.', max_length=255)),
                ('spdx_license', models.CharField(blank=True, choices=utils.spdx.get_spdx_choices, help_text='SPDX license identifier (e.g., MIT, GPL-3.0-or-later, or LicenseRef-...)', max_length=64, null=True, validators=[utils.spdx.validate_spdx])),
            ],
            options={
                'ordering': ['project__vendor__name', 'project__name', 'version_major', 'version_minor', 'version_patch', 'version_prerelease'],
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sanitized_name', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the target as specified in the .core file.', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of this target.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sanitized_name', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fileset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the fileset as specified in the .core file.', max_length=100)),
                ('files', models.JSONField(blank=True, help_text='List of files in this fileset.', null=True)),
                ('file_type', models.CharField(blank=True, help_text='Type of files in this fileset (e.g., verilogSource).', max_length=50, null=True)),
                ('core_package', models.ForeignKey(help_text='The core package this fileset belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='filesets', to='core_directory.corepackage')),
            ],
        ),
        migrations.CreateModel(
            name='FilesetDependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dependency_core_name', models.CharField(help_text='The name of the core package this fileset depends on.', max_length=255)),
                ('dependency_condition', models.CharField(blank=True, help_text='Optional target parameter to indicate the dependency.', max_length=255, null=True)),
                ('core_package', models.ForeignKey(help_text='The core package that has this dependency.', on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='core_directory.corepackage')),
                ('fileset', models.ForeignKey(help_text='The fileset that has this dependency.', on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='core_directory.fileset')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sanitized_name', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(help_text='The name of the project as specified in the .core file.', max_length=255)),
                ('description', models.CharField(help_text='A short description of the core package.', max_length=255)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core_directory.library')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_directory.vendor')),
            ],
            options={
                'unique_together': {('vendor', 'library', 'name')},
            },
        ),
        migrations.AddField(
            model_name='corepackage',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='core_directory.project'),
        ),
        migrations.CreateModel(
            name='TargetConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameters', models.JSONField(blank=True, help_text='Optional parameters for this target.', null=True)),
                ('default_tool', models.CharField(blank=True, help_text='Default tool for this target.', max_length=100, null=True)),
                ('flow', models.CharField(blank=True, help_text='Flow for this target.', max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of this target.', null=True)),
                ('core_package', models.ForeignKey(help_text='The core package this target belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='target_configurations', to='core_directory.corepackage')),
                ('filesets', models.ManyToManyField(help_text='The filesets included in this target.', related_name='target_configurations', to='core_directory.fileset')),
                ('target', models.ForeignKey(help_text='The core package this target belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='target_configurations', to='core_directory.target')),
            ],
        ),
        migrations.AddField(
            model_name='library',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='libraries', to='core_directory.vendor'),
        ),
        migrations.AlterUniqueTogether(
            name='corepackage',
            unique_together={('project', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='library',
            unique_together={('vendor', 'name')},
        ),
    ]
